---
- name: Prepare System
  hosts:
    - master
  become: true
  gather_facts: true
  any_errors_fatal: true
  pre_tasks:
    - name: Pausing for 5 seconds...
      ansible.builtin.pause:
        seconds: 5
  tasks:
    - name: Locale
      block:
        - name: Locale | Set timezone
          community.general.timezone:
            name: "{{ timezone | default('Etc/UTC') }}"
    - name: Networking
      block:
        - name: Networking | Set hostname to inventory hostname
          ansible.builtin.hostname:
            name: "{{ inventory_hostname }}"
        - name: Networking | Update /etc/hosts to include inventory hostname
          ansible.builtin.blockinfile:
            path: /etc/hosts
            block: |
              127.0.1.1   {{ inventory_hostname }}
    - name: Packages | Ubuntu
      when: ansible_facts['distribution'] == 'Ubuntu'
      block:
        - name: Packages | Install required packages
          ansible.builtin.apt:
            name: "{{ ubuntu.packages | default([]) }}"
            state: present
            update_cache: true
        - name: Packages | Remove leaf packages
          ansible.builtin.apt:
            autoremove: true
    - name: User Configuration
      block:
        - name: User Configuration | Add additional SSH public keys
          ansible.posix.authorized_key:
            user: "{{ ansible_user }}"
            key: "{{ item }}"
          loop: "{{ public_ssh_keys | default([]) }}"
        - name: User Configuration | Add user to sudoers
          ansible.builtin.copy:
            content: "{{ ansible_user }} ALL=(ALL:ALL) NOPASSWD:ALL"
            dest: "/etc/sudoers.d/{{ ansible_user }}_nopasswd"
            mode: "0440"
    - name: Disks Configuration
      block:
        - name: Disks Configuration | Mount NVME and add to /etc/fstab
          ansible.posix.mount:
            path: /data
            src: UUID="{{ ansible_devices.nvme0n1.partitions.nvme0n1p1.uuid }}"
            fstype: xfs
            opts: defaults
            dump: "0"
            state: mounted
          when: ansible_devices.nvme0n1.partitions.nvme0n1p1 is defined
        - name: Disks Configuration | Mount all HDDs and add to /etc/fstab
          ansible.posix.mount:
            path: /mnt/hdd{{ idx }}
            src: UUID="{{ hostvars[inventory_hostname]["ansible_devices"][item]["partitions"][item + "1"]["uuid"] }}"
            fstype: xfs
            opts: defaults
            dump: "0"
            state: mounted
          loop:
            - sdb
            - sdc
            - sdd
            - sde
            - sdf
          loop_control:
            index_var: idx
        - name: Disks Configuration | Merge disks
          ansible.posix.mount:
            path: /storage
            src: /mnt/hdd*
            fstype: mergerfs
            opts: defaults,nonempty,allow_other,use_ino,cache.files=off,moveonenospc=true,dropcacheonclose=true,noforget,inodecalc=path-hash,func.create=mspmfs,func.mkdir=mfs,func.getattr=newest,fsname=mergerfs
            dump: "0"
            state: mounted
    - name: System Configuration (1)
      block:
        - name: System Configuration (1) | Disable ufw | Ubuntu
          when: ansible_facts['distribution'] == 'Ubuntu'
          ansible.builtin.systemd:
            service: ufw.service
            enabled: false
            masked: true
            state: stopped
        - name: System Configuration (1) | Enable fstrim
          ansible.builtin.systemd:
            service: fstrim.timer
            enabled: true
    - name: System Configuration (2)
      notify: Reboot
      block:
        - name: System Configuration (2) | Enable kernel modules now
          community.general.modprobe:
            name: "{{ item }}"
            state: present
          loop: [br_netfilter, overlay, rbd]
        - name: System Configuration (2) | Enable kernel modules on boot
          ansible.builtin.copy:
            mode: 0644
            content: "{{ item }}"
            dest: "/etc/modules-load.d/{{ item }}.conf"
          loop: [br_netfilter, overlay, rbd]
        - name: System Configuration (2) | Set sysctls
          ansible.posix.sysctl:
            name: "{{ item.key }}"
            value: "{{ item.value }}"
            sysctl_file: /etc/sysctl.d/99-kubernetes.conf
            reload: true
          with_dict: "{{ sysctl_config }}"
          vars:
            sysctl_config:
              net.ipv4.ip_forward: 1
              net.ipv4.conf.all.forwarding: 1
              net.ipv4.conf.all.rp_filter: 0
              net.ipv4.conf.default.rp_filter: 0
              net.ipv6.conf.all.forwarding: 1
              net.bridge.bridge-nf-call-iptables: 1
              net.bridge.bridge-nf-call-ip6tables: 1
              fs.inotify.max_user_watches: 1048576
              fs.inotify.max_user_instances: 8192
        - name: System Configuration (2) | Disable swap at runtime | Ubuntu
          when:
            - ansible_facts['distribution'] == 'Ubuntu'
            - ansible_swaptotal_mb > 0
          ansible.builtin.command: swapoff -a
        - name: System Configuration (2) | Disable swap at boot | Ubuntu
          when: ansible_facts['distribution'] == 'Ubuntu'
          ansible.posix.mount:
            name: "{{ item }}"
            fstype: swap
            state: absent
          loop: ["none", "swap"]
        - name: System Configuration (2) | Disable mitigations
          ansible.builtin.replace:
            path: /etc/default/grub
            regexp: '^(GRUB_CMDLINE_LINUX=(?:(?![" ]{{ item.key | regex_escape }}=).)*)(?:[" ]{{ item.key | regex_escape }}=\S+)?(.*")$'
            replace: '\1 {{ item.key }}={{ item.value }}\2'
          with_dict: "{{ grub_config }}"
          vars:
            grub_config:
              apparmor: "0"
              mitigations: "off"
          register: grub_status
        - name: System Configuration (2) | Reconfigure grub and initramfs
          ansible.builtin.command: update-grub
          when: grub_status.changed

  handlers:
    - name: Reboot
      ansible.builtin.reboot:
        msg: Rebooting nodes
        reboot_timeout: 3600
